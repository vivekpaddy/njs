load_module modules/ngx_http_js_module.so;

error_log /dev/stdout debug;

events {  }

http {
  js_path "/etc/nginx/njs/";
  js_import main from http/rate-limit/simple.js;
  # optionally set timeout so NJS resets and deletes all data for ratelimit counters
  js_shared_dict_zone zone=kv:1M timeout=3600s evict;

  server {
    listen 80;
    server_name www.example.com;
    # access_log off;
    js_var $rl_zone_name kv;          # shared dict zone name; requred variable
    js_var $rl_windows_ms 30000;      # optional window in miliseconds; default 1 minute window if not set
    js_var $rl_limit 10;              # optional limit for the window; default 10 requests if not set
    js_var $rl_key $remote_addr;      # rate limit key; default remote_addr if not set
    js_set $rl_result main.ratelimit; # call ratelimit function that returns retry-after value if limit is exceeded

    location = / {
      # test rate limit result
      if ($rl_result != "0") {
        add_header Retry-After $rl_result always;
        return 429 "Too Many Requests.";
      }
      # Your normal processing here
      return 200 "hello world";
    }
  }
}
